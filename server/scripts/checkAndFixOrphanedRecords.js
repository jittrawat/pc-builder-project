const db = require('../db');

const TABLES = [
  { name: 'cpu', idColumn: 'CPU_ID', table: 'cpu' },
  { name: 'gpu', idColumn: 'GPU_ID', table: 'gpu' },
  { name: 'mainboard', idColumn: 'mainboard_ID', table: 'mainboard' },
  { name: 'ram', idColumn: 'RAM_ID', table: 'ram' },
  { name: 'ssd', idColumn: 'SSD_ID', table: 'ssd' },
  { name: 'harddisk', idColumn: 'Harddisk_ID', table: 'harddisk' },
  { name: 'cooler', idColumn: 'Cooler_ID', table: 'cooler' },
  { name: 'power', idColumn: 'Power_ID', table: 'power' },
  { name: 'pc_case', idColumn: 'Case_ID', table: 'pc_case' }
];

async function checkOrphanedRecords() {
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö orphaned records...\n');
  
  const results = [];
  
  for (const tableInfo of TABLES) {
    try {
      const [orphaned] = await db.query(`
        SELECT t.Device_ID, t.${tableInfo.idColumn}
        FROM ${tableInfo.table} t
        LEFT JOIN device d ON t.Device_ID = d.Device_ID
        WHERE d.Device_ID IS NULL
      `);
      
      if (orphaned.length > 0) {
        results.push({
          table: tableInfo.name,
          count: orphaned.length,
          records: orphaned
        });
        
        console.log(`‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableInfo.name.toUpperCase()}: ‡∏û‡∏ö ${orphaned.length} orphaned records`);
        orphaned.forEach(record => {
          console.log(`   - ${tableInfo.idColumn}: ${record[tableInfo.idColumn]}, Device_ID: ${record.Device_ID}`);
        });
      } else {
        console.log(`‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableInfo.name.toUpperCase()}: ‡πÑ‡∏°‡πà‡∏û‡∏ö orphaned records`);
      }
    } catch (err) {
      console.error(`‚ö†Ô∏è  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableInfo.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, err.message);
    }
  }
  
  console.log('\n' + '='.repeat(60));
  
  return results;
}

async function fixOrphanedRecords(orphanedResults, mode = 'delete') {
  console.log(`\nüîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç orphaned records (‡πÇ‡∏´‡∏°‡∏î: ${mode})...\n`);
  
  let totalFixed = 0;
  
  for (const result of orphanedResults) {
    const tableInfo = TABLES.find(t => t.name === result.table);
    if (!tableInfo) continue;
    
    console.log(`\n‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${result.table.toUpperCase()}...`);
    
    if (mode === 'delete') {
      // ‡∏•‡∏ö orphaned records
      for (const record of result.records) {
        try {
          await db.query(`
            DELETE FROM ${tableInfo.table} 
            WHERE ${tableInfo.idColumn} = ?
          `, [record[tableInfo.idColumn]]);
          
          console.log(`  ‚úì ‡∏•‡∏ö ${tableInfo.idColumn}: ${record[tableInfo.idColumn]} (Device_ID: ${record.Device_ID})`);
          totalFixed++;
        } catch (err) {
          console.error(`  ‚úó ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${tableInfo.idColumn}: ${record[tableInfo.idColumn]} - ${err.message}`);
        }
      }
    } else if (mode === 'create') {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á device records ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
      for (const record of result.records) {
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Device_ID ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (!record.Device_ID) {
            console.log(`  ‚ö† ‡∏Ç‡πâ‡∏≤‡∏° ${tableInfo.idColumn}: ${record[tableInfo.idColumn]} (‡πÑ‡∏°‡πà‡∏°‡∏µ Device_ID)`);
            continue;
          }
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á placeholder device record
          await db.query(`
            INSERT INTO device (Device_ID, Device_Name, price, image_url)
            VALUES (?, ?, ?, ?)
          `, [
            record.Device_ID,
            `[Recovered] ${result.table.toUpperCase()} ID: ${record[tableInfo.idColumn]}`,
            0,
            null
          ]);
          
          console.log(`  ‚úì ‡∏™‡∏£‡πâ‡∏≤‡∏á device record: Device_ID: ${record.Device_ID}`);
          totalFixed++;
        } catch (err) {
          console.error(`  ‚úó ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à Device_ID: ${record.Device_ID} - ${err.message}`);
        }
      }
    }
  }
  
  console.log(`\n${'='.repeat(60)}`);
  console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${totalFixed} records`);
  
  return totalFixed;
}

async function checkMissingDeviceIDs() {
  console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö records ‡∏ó‡∏µ‡πà Device_ID ‡πÄ‡∏õ‡πá‡∏ô NULL...\n');
  
  let foundNulls = false;
  
  for (const tableInfo of TABLES) {
    try {
      const [nullRecords] = await db.query(`
        SELECT ${tableInfo.idColumn} 
        FROM ${tableInfo.table} 
        WHERE Device_ID IS NULL
      `);
      
      if (nullRecords.length > 0) {
        foundNulls = true;
        console.log(`‚ö†Ô∏è  ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableInfo.name.toUpperCase()}: ‡∏û‡∏ö ${nullRecords.length} records ‡∏ó‡∏µ‡πà Device_ID ‡πÄ‡∏õ‡πá‡∏ô NULL`);
        nullRecords.forEach(record => {
          console.log(`   - ${tableInfo.idColumn}: ${record[tableInfo.idColumn]}`);
        });
      }
    } catch (err) {
      console.error(`‚ö†Ô∏è  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á ${tableInfo.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, err.message);
    }
  }
  
  if (!foundNulls) {
    console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö records ‡∏ó‡∏µ‡πà Device_ID ‡πÄ‡∏õ‡πá‡∏ô NULL');
  }
  
  console.log('\n' + '='.repeat(60));
}

async function main() {
  try {
    console.log('\n' + '='.repeat(60));
    console.log('  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Orphaned Records');
    console.log('='.repeat(60) + '\n');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NULL Device_IDs
    await checkMissingDeviceIDs();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö orphaned records
    const orphanedResults = await checkOrphanedRecords();
    
    const totalOrphaned = orphanedResults.reduce((sum, r) => sum + r.count, 0);
    
    if (totalOrphaned === 0) {
      console.log('\n‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö orphaned records - ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
      process.exit(0);
    }
    
    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö orphaned records ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalOrphaned} records`);
    console.log('\n‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    console.log('  1. ‡∏•‡∏ö orphaned records (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ - ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)');
    console.log('  2. ‡∏™‡∏£‡πâ‡∏≤‡∏á device records ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)');
    console.log('  3. ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ - ‡πÅ‡∏Ñ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
    
    // ‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    readline.question('\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (1/2/3): ', async (answer) => {
      if (answer === '1') {
        await fixOrphanedRecords(orphanedResults, 'delete');
        console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...');
        await checkOrphanedRecords();
      } else if (answer === '2') {
        await fixOrphanedRecords(orphanedResults, 'create');
        console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...');
        await checkOrphanedRecords();
      } else {
        console.log('\nüìù ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á - ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
      }
      
      readline.close();
      await db.end();
      process.exit(0);
    });
    
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    await db.end();
    process.exit(1);
  }
}

// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ arguments
const args = process.argv.slice(2);
if (args.includes('--auto-delete')) {
  // ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏•‡∏ö‡πÄ‡∏•‡∏¢
  (async () => {
    try {
      const orphanedResults = await checkOrphanedRecords();
      if (orphanedResults.length > 0) {
        await fixOrphanedRecords(orphanedResults, 'delete');
        await checkOrphanedRecords();
      }
      await db.end();
      process.exit(0);
    } catch (err) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
      await db.end();
      process.exit(1);
    }
  })();
} else if (args.includes('--auto-create')) {
  // ‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: ‡∏™‡∏£‡πâ‡∏≤‡∏á device records
  (async () => {
    try {
      const orphanedResults = await checkOrphanedRecords();
      if (orphanedResults.length > 0) {
        await fixOrphanedRecords(orphanedResults, 'create');
        await checkOrphanedRecords();
      }
      await db.end();
      process.exit(0);
    } catch (err) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
      await db.end();
      process.exit(1);
    }
  })();
} else if (args.includes('--check-only')) {
  // ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  (async () => {
    try {
      await checkMissingDeviceIDs();
      await checkOrphanedRecords();
      await db.end();
      process.exit(0);
    } catch (err) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
      await db.end();
      process.exit(1);
    }
  })();
} else {
  // ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏°‡∏µ interactive menu
  main();
}

