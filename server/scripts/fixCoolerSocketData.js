const db = require('../db');

async function fixCoolerSocketData() {
  try {
    console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Socket_Sup ‡∏Ç‡∏≠‡∏á Cooler\n');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cooler ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [coolers] = await db.query(`
      SELECT cooler_ID, Device_ID, Socket_Sup, details 
      FROM cooler
    `);

    console.log(`‡∏û‡∏ö Cooler ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${coolers.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`);

    let updated = 0;
    let skipped = 0;

    for (const cooler of coolers) {
      const detailsText = cooler.details || '';
      
      // ‡∏î‡∏∂‡∏á socket ‡∏à‡∏≤‡∏Å details ‡πÇ‡∏î‡∏¢‡∏´‡∏≤ pattern ‡∏Ç‡∏≠‡∏á socket
      const socketPatterns = [
        /LGA[- ]?\d+/gi,  // Intel sockets: LGA1700, LGA-1700, LGA 1700
        /AM\d+/gi,        // AMD sockets: AM4, AM5
        /TR4/gi,          // AMD Threadripper
        /sTRX4/gi         // AMD Threadripper
      ];

      const foundSockets = new Set();

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ socket patterns ‡πÉ‡∏ô details
      socketPatterns.forEach(pattern => {
        const matches = detailsText.match(pattern);
        if (matches) {
          matches.forEach(match => {
            // Normalize socket names
            const normalized = match.replace(/[- ]/g, '').toUpperCase();
            foundSockets.add(normalized);
          });
        }
      });

      if (foundSockets.size > 0) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Socket_Sup string ‡∏à‡∏≤‡∏Å sockets ‡∏ó‡∏µ‡πà‡∏û‡∏ö
        const newSocketSup = Array.from(foundSockets).join(',');
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ñ‡πâ‡∏≤‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏°
        if (newSocketSup !== cooler.Socket_Sup) {
          await db.query(
            'UPDATE cooler SET Socket_Sup = ? WHERE cooler_ID = ?',
            [newSocketSup, cooler.cooler_ID]
          );
          
          console.log(`‚úÖ Updated Cooler ID ${cooler.cooler_ID}:`);
          console.log(`   ‡πÄ‡∏î‡∏¥‡∏°: "${cooler.Socket_Sup || 'NULL'}"`);
          console.log(`   ‡πÉ‡∏´‡∏°‡πà: "${newSocketSup}"\n`);
          updated++;
        } else {
          skipped++;
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ socket ‡πÉ‡∏ô details ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ socket ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        const defaultSocket = 'LGA1700,LGA1200,LGA1151,LGA1150,LGA1155,LGA1156,LGA1851,AM4,AM5';
        
        await db.query(
          'UPDATE cooler SET Socket_Sup = ? WHERE cooler_ID = ?',
          [defaultSocket, cooler.cooler_ID]
        );
        
        console.log(`‚ö†Ô∏è  Cooler ID ${cooler.cooler_ID} - ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ socket ‡πÉ‡∏ô details, ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default`);
        console.log(`   ‡πÉ‡∏´‡∏°‡πà: "${defaultSocket}"\n`);
        updated++;
      }
    }

    console.log('='.repeat(60));
    console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!`);
    console.log(`   - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï: ${updated} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   - ‡∏Ç‡πâ‡∏≤‡∏°: ${skipped} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)`);
    console.log('='.repeat(60));

    await db.end();
    process.exit(0);
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
    await db.end();
    process.exit(1);
  }
}

fixCoolerSocketData();





